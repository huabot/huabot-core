// Generated by CoffeeScript 1.8.0
(function() {
  var Huabot,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Huabot = (function() {
    function Huabot(host) {
      this.host = host;
    }

    Huabot.prototype._request = function(uri, options, callback) {
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      if (typeof uri === 'object') {
        options = uri;
      } else {
        options.uri = uri;
      }
      return jQuery.ajax({
        url: options.uri,
        data: options.data,
        dataType: 'json',
        method: options.method,
        timeout: options.timeout,
        success: function(data, status, xhr) {
          if (data.err) {
            return callback(data.err);
          }
          return callback(null, data);
        },
        error: function(xhr, status, err) {
          return callback(err);
        }
      });
    };

    Huabot.prototype.auth = function(username, passwd, callback) {
      return this._request('/api/auth', {
        data: {
          username: username,
          passwd: passwd
        },
        method: 'POST'
      }, callback);
    };

    Huabot.prototype.unauth = function(callback) {
      return this._request('/api/unauth', callback);
    };

    Huabot.prototype.saveRobot = function(data, callback) {
      var extraData, formData, k, keys, requiredKeys, robotId, uri, v;
      keys = ['name', 'passwd', 'subscribe', 'day_limit', 'one_by_one'];
      requiredKeys = ['name', 'passwd'];
      formData = {};
      extraData = {};
      robotId = null;
      if (data.robot_id) {
        robotId = data.robot_id;
        delete data.robot_id;
      }
      for (k in data) {
        v = data[k];
        if (__indexOf.call(requiredKeys, k) >= 0 && !v) {
          return callback("" + k + " is required");
        }
        if (__indexOf.call(keys, k) >= 0) {
          formData[k] = v;
        } else {
          extraData[k] = v;
        }
      }
      formData['extra'] = JSON.stringify(extraData);
      uri = '/api/robots/';
      if (robotId) {
        uri = "" + uri + robotId;
      }
      return this._request(uri, {
        data: formData,
        method: 'POST'
      }, callback);
    };

    Huabot.prototype.removeRobot = function(robotId, callback) {
      return this._request("/api/robots/" + robotId, {
        method: 'DELETE'
      }, callback);
    };

    Huabot.prototype.startRobot = function(robotId, callback) {
      return this._request("/api/robots/" + robotId + "/start", {
        method: 'POST'
      }, callback);
    };

    Huabot.prototype.stopRobot = function(robotId, callback) {
      return this._request("/api/robots/" + robotId + "/stop", {
        method: 'POST'
      }, callback);
    };

    Huabot.prototype.getRobots = function(page, limit, callback) {
      return this._request("/api/robots?page=" + "&limit=" + limit, callback);
    };

    Huabot.prototype.saveTask = function(data, callback) {
      var extraData, formData, k, keys, requiredKeys, taskId, uri, v;
      keys = ['url', 'desc', 'spider', 'proxies', 'refresh_delay'];
      requiredKeys = ['url', 'spider'];
      formData = {};
      extraData = {};
      taskId = null;
      if (data.task_id) {
        taskId = data.task_id;
        delete data.task_id;
      }
      for (k in data) {
        v = data[k];
        if (__indexOf.call(requiredKeys, k) >= 0 && !v) {
          return callback("" + k + " is required");
        }
        if (__indexOf.call(keys, k) >= 0) {
          formData[k] = v;
        } else {
          extraData[k] = v;
        }
      }
      formData['extra'] = JSON.stringify(extraData);
      uri = '/api/tasks/';
      if (taskId) {
        uri = "" + uri + taskId;
      }
      return this._request(uri, {
        data: formData,
        method: 'POST'
      }, callback);
    };

    Huabot.prototype.removeTask = function(taskId, callback) {
      return this._request("/api/tasks/" + taskId, {
        method: 'DELETE'
      }, callback);
    };

    Huabot.prototype.removeTaskLink = function(taskId, callback) {
      return this._request("/api/tasks/" + taskId + "/clear_uniq", {
        method: 'POST'
      }, callback);
    };

    Huabot.prototype.getTasks = function(page, limit, callback) {
      return this._request("/api/tasks?page=" + "&limit=" + limit, callback);
    };

    Huabot.prototype.getSuccedCount = function(dateType, callback) {
      return this._request("/api/" + dateType + "/succeed_count", callback);
    };

    Huabot.prototype.getRobotSuccedCount = function(robotId, dateType, callback) {
      return this._request("/api/robots/" + robotId + "/" + dateType + "/succeed_count", callback);
    };

    Huabot.prototype.getTaskSuccedCount = function(taskId, dateType, callback) {
      return this._request("/api/tasks/" + taskId + "/" + dateType + "/succeed_count", callback);
    };

    return Huabot;

  })();

}).call(this);
